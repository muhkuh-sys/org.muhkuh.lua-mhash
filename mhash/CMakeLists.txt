CMAKE_MINIMUM_REQUIRED(VERSION 3.7)

PROJECT("module_mhash_lua")

FIND_PACKAGE(SWIG REQUIRED)
INCLUDE(${SWIG_USE_FILE})

SET(libmhash_DIR ${CMAKE_BINARY_DIR}/../libmhash/install/cmake)
FIND_PACKAGE("libmhash" REQUIRED)
GET_TARGET_PROPERTY(MHASH_LIBRARY libmhash::TARGET_mhash LOCATION)
GET_TARGET_PROPERTY(MHASH_INCLUDE_DIRECTORIES libmhash::TARGET_mhash INTERFACE_INCLUDE_DIRECTORIES)

INCLUDE_DIRECTORIES(TARGET_module_mhash_lua ${CMAKE_CURRENT_SOURCE_DIR} ${LUA_INCLUDE_DIR} ${MHASH_INCLUDE_DIRECTORIES})

# Build the Lua module.
SET_SOURCE_FILES_PROPERTIES(mhash.i PROPERTIES CPLUSPLUS ON)
SET_SOURCE_FILES_PROPERTIES(mhash.i PROPERTIES SWIG_FLAGS "-I${CMAKE_CURRENT_SOURCE_DIR} -I${MHASH_INCLUDE_DIRECTORIES}")
SWIG_ADD_MODULE(TARGET_module_mhash_lua lua mhash.i mhash_state.cpp)
SWIG_LINK_LIBRARIES(TARGET_module_mhash_lua ${LUA_LIBRARIES} ${MHASH_LIBRARY})

# Set the name of the output file to "mhash".
SET_TARGET_PROPERTIES(TARGET_module_mhash_lua PROPERTIES PREFIX "" OUTPUT_NAME "mhash")

# On mingw link all compiler libraries static.
IF((${CMAKE_SYSTEM_NAME} STREQUAL "Windows") AND (${CMAKE_COMPILER_IS_GNUCC}))
	SET_PROPERTY(TARGET TARGET_module_mhash_lua PROPERTY LINK_FLAGS "-static -static-libgcc -static-libstdc++")
ENDIF((${CMAKE_SYSTEM_NAME} STREQUAL "Windows") AND (${CMAKE_COMPILER_IS_GNUCC}))

# Install the lua module.
INSTALL(TARGETS TARGET_module_mhash_lua DESTINATION ${INSTALL_DIR_LUA_MODULES})

# Add tests for this module.
IF((${CMAKE_SYSTEM_NAME} STREQUAL "Windows") AND (${CMAKE_COMPILER_IS_GNUCC}))
	# Here are the MinGW specific tests.
	ADD_TEST(NAME mhash_MinGW_DLL_dependencies
	         COMMAND "${PYTHON_EXECUTABLE}" ${CMAKE_HOME_DIRECTORY}/cmake/tests/mingw_dll_dependencies.py -u lua5.1 -u lua5.2 -u lua5.3 $<TARGET_FILE:TARGET_module_mhash_lua>)
ENDIF((${CMAKE_SYSTEM_NAME} STREQUAL "Windows") AND (${CMAKE_COMPILER_IS_GNUCC}))
